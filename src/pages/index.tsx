import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import React from "react";
import Input from "~/components/Input";
import Spinner from "~/components/Spinner";

import { api } from "~/utils/api";
import trpcErrorUtils from "~/utils/trpcErrorUtils";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
            {/* <MutationShowcase /> */}
            {/* <QueryShowcase /> */}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const MutationShowcase: React.FC = () => {
  const utils = api.useContext();
  const [userMessage, setUserMessage] = React.useState<string>("");

  const exampleMutation = api.example.create.useMutation({
    onSuccess: async () => {
      await utils.example.getAll.invalidate();
    },
  });

  const error = trpcErrorUtils.parseMessage(exampleMutation.error?.message);

  const handleClick = () => {
    console.log("mutate");
    exampleMutation.mutate({ title: userMessage });
  };

  return (
    <div className="flex flex-col items-center gap-2">
      <Input
        label="Your message"
        placeholder="Type something..."
        value={userMessage}
        onChange={setUserMessage}
      />
      <div>
        <button
          type="button"
          className="items-center rounded-full bg-purple-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-300 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800"
          onClick={handleClick}
          disabled={exampleMutation.isLoading}
        >
          {exampleMutation.isLoading ? <Spinner /> : null}
          {exampleMutation.isLoading ? "Loading..." : "Create new post"}
        </button>
      </div>
      {error ? (
        <p className="text-sm text-red-500">{error[0]?.message}</p>
      ) : null}
    </div>
  );
};

const QueryShowcase: React.FC = () => {
  const { data: posts } = api.example.getAll.useQuery();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {posts?.map((post) => (
        <p className="text-center text-2xl text-white" key={post.id}>
          {post.title}
        </p>
      ))}
    </div>
  );
};
